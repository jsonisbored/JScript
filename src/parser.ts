/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* Program := stmts=Stmt* $
* Stmt := CommentStmt
*     | ReturnStmt
*     | IfStmt
*     | LetStmt
*     | AssignStmt
*     | FnStmt
*     | ExprStmt
* LetStmt := _'let\s'_
*     mut='mut\s'?_
*     pattern=Pattern
*     _{':\s*' &'[a-zA-Z_]'}? type='[a-zA-Z_][a-zA-Z0-9_]*'?
*     _'='_
*     expr=Expr
*     _';' pos=@ _
* AssignStmt := _ pattern=Pattern _'='_ expr=Expr _';' pos=@ _
* CommentStmt := _ literal='//.*' pos=@ _
* ExprStmt := expr=Expr pos=@
* FnStmt := _'fn\s'_
*     ident=Ident
*     _'\('_ params=Param* _'\)'_
*     _{':\s*' &'[a-zA-Z_]'}? return_type='[a-zA-Z_][a-zA-Z0-9_]*'?
*     _'{'_ stmts=Stmt* _'}'_
*     pos=@ _
* Param := _ name='[a-zA-Z_][a-zA-Z0-9_]*'_
*     _':'_ type='[a-zA-Z_][a-zA-Z0-9_]*' _
*     {_','_ | &'\)'}
* ReturnStmt := _'\sreturn\s'_ expr=Expr _';'_ pos=@
* IfStmt := _'if\s'_
*     condition=Expr
*     _'{'_ stmts=Stmt* _'}'_
*     pos=@
*     else=ElseStmt?
* ElseStmt := {_'else'_ &'if|{'_}
*     if=IfStmt?
*     _'{'?_ stmts=Stmt* _'}'?_
*     pos=@
* Expr := IfExpr
*     | ArrayExpr
*     | SumExpr
*     | ProdExpr
*     | GroupExpr
*     | RangeExpr
*     | NumExpr
*     | StringExpr
*     | GetFieldExpr
*     | GetIndexExpr
*     | IdentExpr
* ArrayExpr := _'\['_ items=ArrayItem* _'\]'_ pos=@
*     .type = string { return items.length ? `Array<${items[0].expr.type}>` : "idk"; }
* ArrayItem := expr=Expr {_','_ | &'\]'}
* SumExpr := left=Expr _ op='\+|-'_ right=Expr pos=@
*     .type = string { return this.left.type; }
* ProdExpr := left=Expr _ op='\*|/'_ right=Expr pos=@
*     .type = string { return this.left.type; }
* GroupExpr := _'\('_ expr=Expr _'\)'_ pos=@
*     .type = string { return this.expr.type; }
* GetFieldExpr := expr=Expr _'\.'_ field='[a-zA-Z_][a-zA-Z0-9_]*|[0-9]+'_ pos=@
*     .type = string { return "idk"; }
* GetIndexExpr := expr=Expr _'\['_ index=Expr _'\]'_ pos=@ 
*     .type = string { return "idk"; }
* IfExpr := _'if\s'_
*     condition=Expr
*     _'{'_ stmts=Stmt* _'}'_
*     pos=@
*     else=ElseExpr?
*     .type = string { return "idk"; }
* ElseExpr := {_'else'_ &'if|{'_}
*     if=IfExpr?
*     _'{'?_ stmts=Stmt* _'}'?_
*     pos=@
* RangeExpr := min=Expr _'\.\.' inclusive='='? _ max=Expr pos=@
*     .type = string { return 'Range<num>'; }
* NumExpr := _ literal='-?[0-9]+(\.[0-9]+)?' pos=@ _
*     .value = number { return Number(this.literal); }
*     .type = string { return 'num'; }
* StringExpr := _ literal='".*"'_ pos=@
*     .value = string { return this.literal.slice(1, -1); }
*     .type = string { return 'str'; }
* IdentExpr := _ literal='[a-zA-Z_][a-zA-Z0-9_]*'_ pos=@
*     .type = string { return 'idk'; }
* Pattern := Ident
*     | ArrayPat
* ArrayPat := _'\['_ items=ArrayPatItem* _'\]'_
* ArrayPatItem := _ literal='[a-zA-Z_][a-zA-Z0-9_]*'_  {_','_ | &'\]'}
*     .type = string { return 'idk'; }
* Ident := _ literal='[a-zA-Z_][a-zA-Z0-9_]*'_
*     .type = string { return 'idk'; }
* _ := '\s*'
*/
type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
export interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    Program = "Program",
    Stmt_1 = "Stmt_1",
    Stmt_2 = "Stmt_2",
    Stmt_3 = "Stmt_3",
    Stmt_4 = "Stmt_4",
    Stmt_5 = "Stmt_5",
    Stmt_6 = "Stmt_6",
    Stmt_7 = "Stmt_7",
    LetStmt = "LetStmt",
    LetStmt_$0 = "LetStmt_$0",
    AssignStmt = "AssignStmt",
    CommentStmt = "CommentStmt",
    ExprStmt = "ExprStmt",
    FnStmt = "FnStmt",
    FnStmt_$0 = "FnStmt_$0",
    Param = "Param",
    Param_$0_1 = "Param_$0_1",
    Param_$0_2 = "Param_$0_2",
    ReturnStmt = "ReturnStmt",
    IfStmt = "IfStmt",
    ElseStmt = "ElseStmt",
    ElseStmt_$0 = "ElseStmt_$0",
    Expr_1 = "Expr_1",
    Expr_2 = "Expr_2",
    Expr_3 = "Expr_3",
    Expr_4 = "Expr_4",
    Expr_5 = "Expr_5",
    Expr_6 = "Expr_6",
    Expr_7 = "Expr_7",
    Expr_8 = "Expr_8",
    Expr_9 = "Expr_9",
    Expr_10 = "Expr_10",
    Expr_11 = "Expr_11",
    ArrayExpr = "ArrayExpr",
    ArrayItem = "ArrayItem",
    ArrayItem_$0_1 = "ArrayItem_$0_1",
    ArrayItem_$0_2 = "ArrayItem_$0_2",
    SumExpr = "SumExpr",
    ProdExpr = "ProdExpr",
    GroupExpr = "GroupExpr",
    GetFieldExpr = "GetFieldExpr",
    GetIndexExpr = "GetIndexExpr",
    IfExpr = "IfExpr",
    ElseExpr = "ElseExpr",
    ElseExpr_$0 = "ElseExpr_$0",
    RangeExpr = "RangeExpr",
    NumExpr = "NumExpr",
    StringExpr = "StringExpr",
    IdentExpr = "IdentExpr",
    Pattern_1 = "Pattern_1",
    Pattern_2 = "Pattern_2",
    ArrayPat = "ArrayPat",
    ArrayPatItem = "ArrayPatItem",
    ArrayPatItem_$0_1 = "ArrayPatItem_$0_1",
    ArrayPatItem_$0_2 = "ArrayPatItem_$0_2",
    Ident = "Ident",
    _ = "_",
    $EOF = "$EOF",
}
export interface Program {
    kind: ASTKinds.Program;
    stmts: Stmt[];
}
export type Stmt = Stmt_1 | Stmt_2 | Stmt_3 | Stmt_4 | Stmt_5 | Stmt_6 | Stmt_7;
export type Stmt_1 = CommentStmt;
export type Stmt_2 = ReturnStmt;
export type Stmt_3 = IfStmt;
export type Stmt_4 = LetStmt;
export type Stmt_5 = AssignStmt;
export type Stmt_6 = FnStmt;
export type Stmt_7 = ExprStmt;
export interface LetStmt {
    kind: ASTKinds.LetStmt;
    mut: Nullable<string>;
    pattern: Pattern;
    type: Nullable<string>;
    expr: Expr;
    pos: PosInfo;
}
export interface LetStmt_$0 {
    kind: ASTKinds.LetStmt_$0;
}
export interface AssignStmt {
    kind: ASTKinds.AssignStmt;
    pattern: Pattern;
    expr: Expr;
    pos: PosInfo;
}
export interface CommentStmt {
    kind: ASTKinds.CommentStmt;
    literal: string;
    pos: PosInfo;
}
export interface ExprStmt {
    kind: ASTKinds.ExprStmt;
    expr: Expr;
    pos: PosInfo;
}
export interface FnStmt {
    kind: ASTKinds.FnStmt;
    ident: Ident;
    params: Param[];
    return_type: Nullable<string>;
    stmts: Stmt[];
    pos: PosInfo;
}
export interface FnStmt_$0 {
    kind: ASTKinds.FnStmt_$0;
}
export interface Param {
    kind: ASTKinds.Param;
    name: string;
    type: string;
}
export type Param_$0 = Param_$0_1 | Param_$0_2;
export interface Param_$0_1 {
    kind: ASTKinds.Param_$0_1;
}
export type Param_$0_2 = string;
export interface ReturnStmt {
    kind: ASTKinds.ReturnStmt;
    expr: Expr;
    pos: PosInfo;
}
export interface IfStmt {
    kind: ASTKinds.IfStmt;
    condition: Expr;
    stmts: Stmt[];
    pos: PosInfo;
    else: Nullable<ElseStmt>;
}
export interface ElseStmt {
    kind: ASTKinds.ElseStmt;
    if: Nullable<IfStmt>;
    stmts: Stmt[];
    pos: PosInfo;
}
export interface ElseStmt_$0 {
    kind: ASTKinds.ElseStmt_$0;
}
export type Expr = Expr_1 | Expr_2 | Expr_3 | Expr_4 | Expr_5 | Expr_6 | Expr_7 | Expr_8 | Expr_9 | Expr_10 | Expr_11;
export type Expr_1 = IfExpr;
export type Expr_2 = ArrayExpr;
export type Expr_3 = SumExpr;
export type Expr_4 = ProdExpr;
export type Expr_5 = GroupExpr;
export type Expr_6 = RangeExpr;
export type Expr_7 = NumExpr;
export type Expr_8 = StringExpr;
export type Expr_9 = GetFieldExpr;
export type Expr_10 = GetIndexExpr;
export type Expr_11 = IdentExpr;
export class ArrayExpr {
    public kind: ASTKinds.ArrayExpr = ASTKinds.ArrayExpr;
    public items: ArrayItem[];
    public pos: PosInfo;
    public type: string;
    constructor(items: ArrayItem[], pos: PosInfo){
        this.items = items;
        this.pos = pos;
        this.type = ((): string => {
        return items.length ? `Array<${items[0].expr.type}>` : "idk";
        })();
    }
}
export interface ArrayItem {
    kind: ASTKinds.ArrayItem;
    expr: Expr;
}
export type ArrayItem_$0 = ArrayItem_$0_1 | ArrayItem_$0_2;
export interface ArrayItem_$0_1 {
    kind: ASTKinds.ArrayItem_$0_1;
}
export type ArrayItem_$0_2 = string;
export class SumExpr {
    public kind: ASTKinds.SumExpr = ASTKinds.SumExpr;
    public left: Expr;
    public op: string;
    public right: Expr;
    public pos: PosInfo;
    public type: string;
    constructor(left: Expr, op: string, right: Expr, pos: PosInfo){
        this.left = left;
        this.op = op;
        this.right = right;
        this.pos = pos;
        this.type = ((): string => {
        return this.left.type;
        })();
    }
}
export class ProdExpr {
    public kind: ASTKinds.ProdExpr = ASTKinds.ProdExpr;
    public left: Expr;
    public op: string;
    public right: Expr;
    public pos: PosInfo;
    public type: string;
    constructor(left: Expr, op: string, right: Expr, pos: PosInfo){
        this.left = left;
        this.op = op;
        this.right = right;
        this.pos = pos;
        this.type = ((): string => {
        return this.left.type;
        })();
    }
}
export class GroupExpr {
    public kind: ASTKinds.GroupExpr = ASTKinds.GroupExpr;
    public expr: Expr;
    public pos: PosInfo;
    public type: string;
    constructor(expr: Expr, pos: PosInfo){
        this.expr = expr;
        this.pos = pos;
        this.type = ((): string => {
        return this.expr.type;
        })();
    }
}
export class GetFieldExpr {
    public kind: ASTKinds.GetFieldExpr = ASTKinds.GetFieldExpr;
    public expr: Expr;
    public field: string;
    public pos: PosInfo;
    public type: string;
    constructor(expr: Expr, field: string, pos: PosInfo){
        this.expr = expr;
        this.field = field;
        this.pos = pos;
        this.type = ((): string => {
        return "idk";
        })();
    }
}
export class GetIndexExpr {
    public kind: ASTKinds.GetIndexExpr = ASTKinds.GetIndexExpr;
    public expr: Expr;
    public index: Expr;
    public pos: PosInfo;
    public type: string;
    constructor(expr: Expr, index: Expr, pos: PosInfo){
        this.expr = expr;
        this.index = index;
        this.pos = pos;
        this.type = ((): string => {
        return "idk";
        })();
    }
}
export class IfExpr {
    public kind: ASTKinds.IfExpr = ASTKinds.IfExpr;
    public condition: Expr;
    public stmts: Stmt[];
    public pos: PosInfo;
    public else: Nullable<ElseExpr>;
    public type: string;
    constructor(condition: Expr, stmts: Stmt[], pos: PosInfo, else: Nullable<ElseExpr>){
        this.condition = condition;
        this.stmts = stmts;
        this.pos = pos;
        this.else = else;
        this.type = ((): string => {
        return "idk";
        })();
    }
}
export interface ElseExpr {
    kind: ASTKinds.ElseExpr;
    if: Nullable<IfExpr>;
    stmts: Stmt[];
    pos: PosInfo;
}
export interface ElseExpr_$0 {
    kind: ASTKinds.ElseExpr_$0;
}
export class RangeExpr {
    public kind: ASTKinds.RangeExpr = ASTKinds.RangeExpr;
    public min: Expr;
    public inclusive: Nullable<string>;
    public max: Expr;
    public pos: PosInfo;
    public type: string;
    constructor(min: Expr, inclusive: Nullable<string>, max: Expr, pos: PosInfo){
        this.min = min;
        this.inclusive = inclusive;
        this.max = max;
        this.pos = pos;
        this.type = ((): string => {
        return 'Range<num>';
        })();
    }
}
export class NumExpr {
    public kind: ASTKinds.NumExpr = ASTKinds.NumExpr;
    public literal: string;
    public pos: PosInfo;
    public value: number;
    public type: string;
    constructor(literal: string, pos: PosInfo){
        this.literal = literal;
        this.pos = pos;
        this.value = ((): number => {
        return Number(this.literal);
        })();
        this.type = ((): string => {
        return 'num';
        })();
    }
}
export class StringExpr {
    public kind: ASTKinds.StringExpr = ASTKinds.StringExpr;
    public literal: string;
    public pos: PosInfo;
    public value: string;
    public type: string;
    constructor(literal: string, pos: PosInfo){
        this.literal = literal;
        this.pos = pos;
        this.value = ((): string => {
        return this.literal.slice(1, -1);
        })();
        this.type = ((): string => {
        return 'str';
        })();
    }
}
export class IdentExpr {
    public kind: ASTKinds.IdentExpr = ASTKinds.IdentExpr;
    public literal: string;
    public pos: PosInfo;
    public type: string;
    constructor(literal: string, pos: PosInfo){
        this.literal = literal;
        this.pos = pos;
        this.type = ((): string => {
        return 'idk';
        })();
    }
}
export type Pattern = Pattern_1 | Pattern_2;
export type Pattern_1 = Ident;
export type Pattern_2 = ArrayPat;
export interface ArrayPat {
    kind: ASTKinds.ArrayPat;
    items: ArrayPatItem[];
}
export class ArrayPatItem {
    public kind: ASTKinds.ArrayPatItem = ASTKinds.ArrayPatItem;
    public literal: string;
    public type: string;
    constructor(literal: string){
        this.literal = literal;
        this.type = ((): string => {
        return 'idk';
        })();
    }
}
export type ArrayPatItem_$0 = ArrayPatItem_$0_1 | ArrayPatItem_$0_2;
export interface ArrayPatItem_$0_1 {
    kind: ASTKinds.ArrayPatItem_$0_1;
}
export type ArrayPatItem_$0_2 = string;
export class Ident {
    public kind: ASTKinds.Ident = ASTKinds.Ident;
    public literal: string;
    public type: string;
    constructor(literal: string){
        this.literal = literal;
        this.type = ((): string => {
        return 'idk';
        })();
    }
}
export type _ = string;
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
        this.$scope$Expr$memo.clear();
    }
    protected $scope$Expr$memo: Map<number, [Nullable<Expr>, PosInfo]> = new Map();
    public matchProgram($$dpth: number, $$cr?: ErrorTracker): Nullable<Program> {
        return this.run<Program>($$dpth,
            () => {
                let $scope$stmts: Nullable<Stmt[]>;
                let $$res: Nullable<Program> = null;
                if (true
                    && ($scope$stmts = this.loop<Stmt>(() => this.matchStmt($$dpth + 1, $$cr), 0, -1)) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Program, stmts: $scope$stmts};
                }
                return $$res;
            });
    }
    public matchStmt($$dpth: number, $$cr?: ErrorTracker): Nullable<Stmt> {
        return this.choice<Stmt>([
            () => this.matchStmt_1($$dpth + 1, $$cr),
            () => this.matchStmt_2($$dpth + 1, $$cr),
            () => this.matchStmt_3($$dpth + 1, $$cr),
            () => this.matchStmt_4($$dpth + 1, $$cr),
            () => this.matchStmt_5($$dpth + 1, $$cr),
            () => this.matchStmt_6($$dpth + 1, $$cr),
            () => this.matchStmt_7($$dpth + 1, $$cr),
        ]);
    }
    public matchStmt_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Stmt_1> {
        return this.matchCommentStmt($$dpth + 1, $$cr);
    }
    public matchStmt_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Stmt_2> {
        return this.matchReturnStmt($$dpth + 1, $$cr);
    }
    public matchStmt_3($$dpth: number, $$cr?: ErrorTracker): Nullable<Stmt_3> {
        return this.matchIfStmt($$dpth + 1, $$cr);
    }
    public matchStmt_4($$dpth: number, $$cr?: ErrorTracker): Nullable<Stmt_4> {
        return this.matchLetStmt($$dpth + 1, $$cr);
    }
    public matchStmt_5($$dpth: number, $$cr?: ErrorTracker): Nullable<Stmt_5> {
        return this.matchAssignStmt($$dpth + 1, $$cr);
    }
    public matchStmt_6($$dpth: number, $$cr?: ErrorTracker): Nullable<Stmt_6> {
        return this.matchFnStmt($$dpth + 1, $$cr);
    }
    public matchStmt_7($$dpth: number, $$cr?: ErrorTracker): Nullable<Stmt_7> {
        return this.matchExprStmt($$dpth + 1, $$cr);
    }
    public matchLetStmt($$dpth: number, $$cr?: ErrorTracker): Nullable<LetStmt> {
        return this.run<LetStmt>($$dpth,
            () => {
                let $scope$mut: Nullable<Nullable<string>>;
                let $scope$pattern: Nullable<Pattern>;
                let $scope$type: Nullable<Nullable<string>>;
                let $scope$expr: Nullable<Expr>;
                let $scope$pos: Nullable<PosInfo>;
                let $$res: Nullable<LetStmt> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:let\s)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && (($scope$mut = this.regexAccept(String.raw`(?:mut\s)`, "", $$dpth + 1, $$cr)) || true)
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$pattern = this.matchPattern($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ((this.matchLetStmt_$0($$dpth + 1, $$cr)) || true)
                    && (($scope$type = this.regexAccept(String.raw`(?:[a-zA-Z_][a-zA-Z0-9_]*)`, "", $$dpth + 1, $$cr)) || true)
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:=)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$expr = this.matchExpr($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:;)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$pos = this.mark()) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.LetStmt, mut: $scope$mut, pattern: $scope$pattern, type: $scope$type, expr: $scope$expr, pos: $scope$pos};
                }
                return $$res;
            });
    }
    public matchLetStmt_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<LetStmt_$0> {
        return this.run<LetStmt_$0>($$dpth,
            () => {
                let $$res: Nullable<LetStmt_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?::\s*)`, "", $$dpth + 1, $$cr) !== null
                    && this.noConsume<string>(() => this.regexAccept(String.raw`(?:[a-zA-Z_])`, "", $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.LetStmt_$0, };
                }
                return $$res;
            });
    }
    public matchAssignStmt($$dpth: number, $$cr?: ErrorTracker): Nullable<AssignStmt> {
        return this.run<AssignStmt>($$dpth,
            () => {
                let $scope$pattern: Nullable<Pattern>;
                let $scope$expr: Nullable<Expr>;
                let $scope$pos: Nullable<PosInfo>;
                let $$res: Nullable<AssignStmt> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$pattern = this.matchPattern($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:=)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$expr = this.matchExpr($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:;)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$pos = this.mark()) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.AssignStmt, pattern: $scope$pattern, expr: $scope$expr, pos: $scope$pos};
                }
                return $$res;
            });
    }
    public matchCommentStmt($$dpth: number, $$cr?: ErrorTracker): Nullable<CommentStmt> {
        return this.run<CommentStmt>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $scope$pos: Nullable<PosInfo>;
                let $$res: Nullable<CommentStmt> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?://.*)`, "", $$dpth + 1, $$cr)) !== null
                    && ($scope$pos = this.mark()) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.CommentStmt, literal: $scope$literal, pos: $scope$pos};
                }
                return $$res;
            });
    }
    public matchExprStmt($$dpth: number, $$cr?: ErrorTracker): Nullable<ExprStmt> {
        return this.run<ExprStmt>($$dpth,
            () => {
                let $scope$expr: Nullable<Expr>;
                let $scope$pos: Nullable<PosInfo>;
                let $$res: Nullable<ExprStmt> = null;
                if (true
                    && ($scope$expr = this.matchExpr($$dpth + 1, $$cr)) !== null
                    && ($scope$pos = this.mark()) !== null
                ) {
                    $$res = {kind: ASTKinds.ExprStmt, expr: $scope$expr, pos: $scope$pos};
                }
                return $$res;
            });
    }
    public matchFnStmt($$dpth: number, $$cr?: ErrorTracker): Nullable<FnStmt> {
        return this.run<FnStmt>($$dpth,
            () => {
                let $scope$ident: Nullable<Ident>;
                let $scope$params: Nullable<Param[]>;
                let $scope$return_type: Nullable<Nullable<string>>;
                let $scope$stmts: Nullable<Stmt[]>;
                let $scope$pos: Nullable<PosInfo>;
                let $$res: Nullable<FnStmt> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:fn\s)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$ident = this.matchIdent($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$params = this.loop<Param>(() => this.matchParam($$dpth + 1, $$cr), 0, -1)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ((this.matchFnStmt_$0($$dpth + 1, $$cr)) || true)
                    && (($scope$return_type = this.regexAccept(String.raw`(?:[a-zA-Z_][a-zA-Z0-9_]*)`, "", $$dpth + 1, $$cr)) || true)
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:{)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$stmts = this.loop<Stmt>(() => this.matchStmt($$dpth + 1, $$cr), 0, -1)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:})`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$pos = this.mark()) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.FnStmt, ident: $scope$ident, params: $scope$params, return_type: $scope$return_type, stmts: $scope$stmts, pos: $scope$pos};
                }
                return $$res;
            });
    }
    public matchFnStmt_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<FnStmt_$0> {
        return this.run<FnStmt_$0>($$dpth,
            () => {
                let $$res: Nullable<FnStmt_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?::\s*)`, "", $$dpth + 1, $$cr) !== null
                    && this.noConsume<string>(() => this.regexAccept(String.raw`(?:[a-zA-Z_])`, "", $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.FnStmt_$0, };
                }
                return $$res;
            });
    }
    public matchParam($$dpth: number, $$cr?: ErrorTracker): Nullable<Param> {
        return this.run<Param>($$dpth,
            () => {
                let $scope$name: Nullable<string>;
                let $scope$type: Nullable<string>;
                let $$res: Nullable<Param> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$name = this.regexAccept(String.raw`(?:[a-zA-Z_][a-zA-Z0-9_]*)`, "", $$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?::)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$type = this.regexAccept(String.raw`(?:[a-zA-Z_][a-zA-Z0-9_]*)`, "", $$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchParam_$0($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Param, name: $scope$name, type: $scope$type};
                }
                return $$res;
            });
    }
    public matchParam_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<Param_$0> {
        return this.choice<Param_$0>([
            () => this.matchParam_$0_1($$dpth + 1, $$cr),
            () => this.matchParam_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchParam_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Param_$0_1> {
        return this.run<Param_$0_1>($$dpth,
            () => {
                let $$res: Nullable<Param_$0_1> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:,)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Param_$0_1, };
                }
                return $$res;
            });
    }
    public matchParam_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Param_$0_2> {
        return this.noConsume<string>(() => this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr));
    }
    public matchReturnStmt($$dpth: number, $$cr?: ErrorTracker): Nullable<ReturnStmt> {
        return this.run<ReturnStmt>($$dpth,
            () => {
                let $scope$expr: Nullable<Expr>;
                let $scope$pos: Nullable<PosInfo>;
                let $$res: Nullable<ReturnStmt> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\sreturn\s)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$expr = this.matchExpr($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:;)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$pos = this.mark()) !== null
                ) {
                    $$res = {kind: ASTKinds.ReturnStmt, expr: $scope$expr, pos: $scope$pos};
                }
                return $$res;
            });
    }
    public matchIfStmt($$dpth: number, $$cr?: ErrorTracker): Nullable<IfStmt> {
        return this.run<IfStmt>($$dpth,
            () => {
                let $scope$condition: Nullable<Expr>;
                let $scope$stmts: Nullable<Stmt[]>;
                let $scope$pos: Nullable<PosInfo>;
                let $scope$else: Nullable<Nullable<ElseStmt>>;
                let $$res: Nullable<IfStmt> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:if\s)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$condition = this.matchExpr($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:{)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$stmts = this.loop<Stmt>(() => this.matchStmt($$dpth + 1, $$cr), 0, -1)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:})`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$pos = this.mark()) !== null
                    && (($scope$else = this.matchElseStmt($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.IfStmt, condition: $scope$condition, stmts: $scope$stmts, pos: $scope$pos, else: $scope$else};
                }
                return $$res;
            });
    }
    public matchElseStmt($$dpth: number, $$cr?: ErrorTracker): Nullable<ElseStmt> {
        return this.run<ElseStmt>($$dpth,
            () => {
                let $scope$if: Nullable<Nullable<IfStmt>>;
                let $scope$stmts: Nullable<Stmt[]>;
                let $scope$pos: Nullable<PosInfo>;
                let $$res: Nullable<ElseStmt> = null;
                if (true
                    && this.matchElseStmt_$0($$dpth + 1, $$cr) !== null
                    && (($scope$if = this.matchIfStmt($$dpth + 1, $$cr)) || true)
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ((this.regexAccept(String.raw`(?:{)`, "", $$dpth + 1, $$cr)) || true)
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$stmts = this.loop<Stmt>(() => this.matchStmt($$dpth + 1, $$cr), 0, -1)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ((this.regexAccept(String.raw`(?:})`, "", $$dpth + 1, $$cr)) || true)
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$pos = this.mark()) !== null
                ) {
                    $$res = {kind: ASTKinds.ElseStmt, if: $scope$if, stmts: $scope$stmts, pos: $scope$pos};
                }
                return $$res;
            });
    }
    public matchElseStmt_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<ElseStmt_$0> {
        return this.run<ElseStmt_$0>($$dpth,
            () => {
                let $$res: Nullable<ElseStmt_$0> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:else)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.noConsume<string>(() => this.regexAccept(String.raw`(?:if|{)`, "", $$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.ElseStmt_$0, };
                }
                return $$res;
            });
    }
    public matchExpr($$dpth: number, $$cr?: ErrorTracker): Nullable<Expr> {
        const fn = () => {
            return this.choice<Expr>([
                () => this.matchExpr_1($$dpth + 1, $$cr),
                () => this.matchExpr_2($$dpth + 1, $$cr),
                () => this.matchExpr_3($$dpth + 1, $$cr),
                () => this.matchExpr_4($$dpth + 1, $$cr),
                () => this.matchExpr_5($$dpth + 1, $$cr),
                () => this.matchExpr_6($$dpth + 1, $$cr),
                () => this.matchExpr_7($$dpth + 1, $$cr),
                () => this.matchExpr_8($$dpth + 1, $$cr),
                () => this.matchExpr_9($$dpth + 1, $$cr),
                () => this.matchExpr_10($$dpth + 1, $$cr),
                () => this.matchExpr_11($$dpth + 1, $$cr),
            ]);
        };
        const $scope$pos = this.mark();
        const memo = this.$scope$Expr$memo.get($scope$pos.overallPos);
        if(memo !== undefined) {
            this.reset(memo[1]);
            return memo[0];
        }
        const $scope$oldMemoSafe = this.memoSafe;
        this.memoSafe = false;
        this.$scope$Expr$memo.set($scope$pos.overallPos, [null, $scope$pos]);
        let lastRes: Nullable<Expr> = null;
        let lastPos: PosInfo = $scope$pos;
        for(;;) {
            this.reset($scope$pos);
            const res = fn();
            const end = this.mark();
            if(end.overallPos <= lastPos.overallPos)
                break;
            lastRes = res;
            lastPos = end;
            this.$scope$Expr$memo.set($scope$pos.overallPos, [lastRes, lastPos]);
        }
        this.reset(lastPos);
        this.memoSafe = $scope$oldMemoSafe;
        return lastRes;
    }
    public matchExpr_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Expr_1> {
        return this.matchIfExpr($$dpth + 1, $$cr);
    }
    public matchExpr_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Expr_2> {
        return this.matchArrayExpr($$dpth + 1, $$cr);
    }
    public matchExpr_3($$dpth: number, $$cr?: ErrorTracker): Nullable<Expr_3> {
        return this.matchSumExpr($$dpth + 1, $$cr);
    }
    public matchExpr_4($$dpth: number, $$cr?: ErrorTracker): Nullable<Expr_4> {
        return this.matchProdExpr($$dpth + 1, $$cr);
    }
    public matchExpr_5($$dpth: number, $$cr?: ErrorTracker): Nullable<Expr_5> {
        return this.matchGroupExpr($$dpth + 1, $$cr);
    }
    public matchExpr_6($$dpth: number, $$cr?: ErrorTracker): Nullable<Expr_6> {
        return this.matchRangeExpr($$dpth + 1, $$cr);
    }
    public matchExpr_7($$dpth: number, $$cr?: ErrorTracker): Nullable<Expr_7> {
        return this.matchNumExpr($$dpth + 1, $$cr);
    }
    public matchExpr_8($$dpth: number, $$cr?: ErrorTracker): Nullable<Expr_8> {
        return this.matchStringExpr($$dpth + 1, $$cr);
    }
    public matchExpr_9($$dpth: number, $$cr?: ErrorTracker): Nullable<Expr_9> {
        return this.matchGetFieldExpr($$dpth + 1, $$cr);
    }
    public matchExpr_10($$dpth: number, $$cr?: ErrorTracker): Nullable<Expr_10> {
        return this.matchGetIndexExpr($$dpth + 1, $$cr);
    }
    public matchExpr_11($$dpth: number, $$cr?: ErrorTracker): Nullable<Expr_11> {
        return this.matchIdentExpr($$dpth + 1, $$cr);
    }
    public matchArrayExpr($$dpth: number, $$cr?: ErrorTracker): Nullable<ArrayExpr> {
        return this.run<ArrayExpr>($$dpth,
            () => {
                let $scope$items: Nullable<ArrayItem[]>;
                let $scope$pos: Nullable<PosInfo>;
                let $$res: Nullable<ArrayExpr> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\[)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$items = this.loop<ArrayItem>(() => this.matchArrayItem($$dpth + 1, $$cr), 0, -1)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\])`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$pos = this.mark()) !== null
                ) {
                    $$res = new ArrayExpr($scope$items, $scope$pos);
                }
                return $$res;
            });
    }
    public matchArrayItem($$dpth: number, $$cr?: ErrorTracker): Nullable<ArrayItem> {
        return this.run<ArrayItem>($$dpth,
            () => {
                let $scope$expr: Nullable<Expr>;
                let $$res: Nullable<ArrayItem> = null;
                if (true
                    && ($scope$expr = this.matchExpr($$dpth + 1, $$cr)) !== null
                    && this.matchArrayItem_$0($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.ArrayItem, expr: $scope$expr};
                }
                return $$res;
            });
    }
    public matchArrayItem_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<ArrayItem_$0> {
        return this.choice<ArrayItem_$0>([
            () => this.matchArrayItem_$0_1($$dpth + 1, $$cr),
            () => this.matchArrayItem_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchArrayItem_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ArrayItem_$0_1> {
        return this.run<ArrayItem_$0_1>($$dpth,
            () => {
                let $$res: Nullable<ArrayItem_$0_1> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:,)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.ArrayItem_$0_1, };
                }
                return $$res;
            });
    }
    public matchArrayItem_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ArrayItem_$0_2> {
        return this.noConsume<string>(() => this.regexAccept(String.raw`(?:\])`, "", $$dpth + 1, $$cr));
    }
    public matchSumExpr($$dpth: number, $$cr?: ErrorTracker): Nullable<SumExpr> {
        return this.run<SumExpr>($$dpth,
            () => {
                let $scope$left: Nullable<Expr>;
                let $scope$op: Nullable<string>;
                let $scope$right: Nullable<Expr>;
                let $scope$pos: Nullable<PosInfo>;
                let $$res: Nullable<SumExpr> = null;
                if (true
                    && ($scope$left = this.matchExpr($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$op = this.regexAccept(String.raw`(?:\+|-)`, "", $$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$right = this.matchExpr($$dpth + 1, $$cr)) !== null
                    && ($scope$pos = this.mark()) !== null
                ) {
                    $$res = new SumExpr($scope$left, $scope$op, $scope$right, $scope$pos);
                }
                return $$res;
            });
    }
    public matchProdExpr($$dpth: number, $$cr?: ErrorTracker): Nullable<ProdExpr> {
        return this.run<ProdExpr>($$dpth,
            () => {
                let $scope$left: Nullable<Expr>;
                let $scope$op: Nullable<string>;
                let $scope$right: Nullable<Expr>;
                let $scope$pos: Nullable<PosInfo>;
                let $$res: Nullable<ProdExpr> = null;
                if (true
                    && ($scope$left = this.matchExpr($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$op = this.regexAccept(String.raw`(?:\*|/)`, "", $$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$right = this.matchExpr($$dpth + 1, $$cr)) !== null
                    && ($scope$pos = this.mark()) !== null
                ) {
                    $$res = new ProdExpr($scope$left, $scope$op, $scope$right, $scope$pos);
                }
                return $$res;
            });
    }
    public matchGroupExpr($$dpth: number, $$cr?: ErrorTracker): Nullable<GroupExpr> {
        return this.run<GroupExpr>($$dpth,
            () => {
                let $scope$expr: Nullable<Expr>;
                let $scope$pos: Nullable<PosInfo>;
                let $$res: Nullable<GroupExpr> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$expr = this.matchExpr($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$pos = this.mark()) !== null
                ) {
                    $$res = new GroupExpr($scope$expr, $scope$pos);
                }
                return $$res;
            });
    }
    public matchGetFieldExpr($$dpth: number, $$cr?: ErrorTracker): Nullable<GetFieldExpr> {
        return this.run<GetFieldExpr>($$dpth,
            () => {
                let $scope$expr: Nullable<Expr>;
                let $scope$field: Nullable<string>;
                let $scope$pos: Nullable<PosInfo>;
                let $$res: Nullable<GetFieldExpr> = null;
                if (true
                    && ($scope$expr = this.matchExpr($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\.)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$field = this.regexAccept(String.raw`(?:[a-zA-Z_][a-zA-Z0-9_]*|[0-9]+)`, "", $$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$pos = this.mark()) !== null
                ) {
                    $$res = new GetFieldExpr($scope$expr, $scope$field, $scope$pos);
                }
                return $$res;
            });
    }
    public matchGetIndexExpr($$dpth: number, $$cr?: ErrorTracker): Nullable<GetIndexExpr> {
        return this.run<GetIndexExpr>($$dpth,
            () => {
                let $scope$expr: Nullable<Expr>;
                let $scope$index: Nullable<Expr>;
                let $scope$pos: Nullable<PosInfo>;
                let $$res: Nullable<GetIndexExpr> = null;
                if (true
                    && ($scope$expr = this.matchExpr($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\[)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$index = this.matchExpr($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\])`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$pos = this.mark()) !== null
                ) {
                    $$res = new GetIndexExpr($scope$expr, $scope$index, $scope$pos);
                }
                return $$res;
            });
    }
    public matchIfExpr($$dpth: number, $$cr?: ErrorTracker): Nullable<IfExpr> {
        return this.run<IfExpr>($$dpth,
            () => {
                let $scope$condition: Nullable<Expr>;
                let $scope$stmts: Nullable<Stmt[]>;
                let $scope$pos: Nullable<PosInfo>;
                let $scope$else: Nullable<Nullable<ElseExpr>>;
                let $$res: Nullable<IfExpr> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:if\s)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$condition = this.matchExpr($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:{)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$stmts = this.loop<Stmt>(() => this.matchStmt($$dpth + 1, $$cr), 0, -1)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:})`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$pos = this.mark()) !== null
                    && (($scope$else = this.matchElseExpr($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new IfExpr($scope$condition, $scope$stmts, $scope$pos, $scope$else);
                }
                return $$res;
            });
    }
    public matchElseExpr($$dpth: number, $$cr?: ErrorTracker): Nullable<ElseExpr> {
        return this.run<ElseExpr>($$dpth,
            () => {
                let $scope$if: Nullable<Nullable<IfExpr>>;
                let $scope$stmts: Nullable<Stmt[]>;
                let $scope$pos: Nullable<PosInfo>;
                let $$res: Nullable<ElseExpr> = null;
                if (true
                    && this.matchElseExpr_$0($$dpth + 1, $$cr) !== null
                    && (($scope$if = this.matchIfExpr($$dpth + 1, $$cr)) || true)
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ((this.regexAccept(String.raw`(?:{)`, "", $$dpth + 1, $$cr)) || true)
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$stmts = this.loop<Stmt>(() => this.matchStmt($$dpth + 1, $$cr), 0, -1)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ((this.regexAccept(String.raw`(?:})`, "", $$dpth + 1, $$cr)) || true)
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$pos = this.mark()) !== null
                ) {
                    $$res = {kind: ASTKinds.ElseExpr, if: $scope$if, stmts: $scope$stmts, pos: $scope$pos};
                }
                return $$res;
            });
    }
    public matchElseExpr_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<ElseExpr_$0> {
        return this.run<ElseExpr_$0>($$dpth,
            () => {
                let $$res: Nullable<ElseExpr_$0> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:else)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.noConsume<string>(() => this.regexAccept(String.raw`(?:if|{)`, "", $$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.ElseExpr_$0, };
                }
                return $$res;
            });
    }
    public matchRangeExpr($$dpth: number, $$cr?: ErrorTracker): Nullable<RangeExpr> {
        return this.run<RangeExpr>($$dpth,
            () => {
                let $scope$min: Nullable<Expr>;
                let $scope$inclusive: Nullable<Nullable<string>>;
                let $scope$max: Nullable<Expr>;
                let $scope$pos: Nullable<PosInfo>;
                let $$res: Nullable<RangeExpr> = null;
                if (true
                    && ($scope$min = this.matchExpr($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\.\.)`, "", $$dpth + 1, $$cr) !== null
                    && (($scope$inclusive = this.regexAccept(String.raw`(?:=)`, "", $$dpth + 1, $$cr)) || true)
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$max = this.matchExpr($$dpth + 1, $$cr)) !== null
                    && ($scope$pos = this.mark()) !== null
                ) {
                    $$res = new RangeExpr($scope$min, $scope$inclusive, $scope$max, $scope$pos);
                }
                return $$res;
            });
    }
    public matchNumExpr($$dpth: number, $$cr?: ErrorTracker): Nullable<NumExpr> {
        return this.run<NumExpr>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $scope$pos: Nullable<PosInfo>;
                let $$res: Nullable<NumExpr> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:-?[0-9]+(\.[0-9]+)?)`, "", $$dpth + 1, $$cr)) !== null
                    && ($scope$pos = this.mark()) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = new NumExpr($scope$literal, $scope$pos);
                }
                return $$res;
            });
    }
    public matchStringExpr($$dpth: number, $$cr?: ErrorTracker): Nullable<StringExpr> {
        return this.run<StringExpr>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $scope$pos: Nullable<PosInfo>;
                let $$res: Nullable<StringExpr> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:".*")`, "", $$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$pos = this.mark()) !== null
                ) {
                    $$res = new StringExpr($scope$literal, $scope$pos);
                }
                return $$res;
            });
    }
    public matchIdentExpr($$dpth: number, $$cr?: ErrorTracker): Nullable<IdentExpr> {
        return this.run<IdentExpr>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $scope$pos: Nullable<PosInfo>;
                let $$res: Nullable<IdentExpr> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:[a-zA-Z_][a-zA-Z0-9_]*)`, "", $$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$pos = this.mark()) !== null
                ) {
                    $$res = new IdentExpr($scope$literal, $scope$pos);
                }
                return $$res;
            });
    }
    public matchPattern($$dpth: number, $$cr?: ErrorTracker): Nullable<Pattern> {
        return this.choice<Pattern>([
            () => this.matchPattern_1($$dpth + 1, $$cr),
            () => this.matchPattern_2($$dpth + 1, $$cr),
        ]);
    }
    public matchPattern_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Pattern_1> {
        return this.matchIdent($$dpth + 1, $$cr);
    }
    public matchPattern_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Pattern_2> {
        return this.matchArrayPat($$dpth + 1, $$cr);
    }
    public matchArrayPat($$dpth: number, $$cr?: ErrorTracker): Nullable<ArrayPat> {
        return this.run<ArrayPat>($$dpth,
            () => {
                let $scope$items: Nullable<ArrayPatItem[]>;
                let $$res: Nullable<ArrayPat> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\[)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$items = this.loop<ArrayPatItem>(() => this.matchArrayPatItem($$dpth + 1, $$cr), 0, -1)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\])`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.ArrayPat, items: $scope$items};
                }
                return $$res;
            });
    }
    public matchArrayPatItem($$dpth: number, $$cr?: ErrorTracker): Nullable<ArrayPatItem> {
        return this.run<ArrayPatItem>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<ArrayPatItem> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:[a-zA-Z_][a-zA-Z0-9_]*)`, "", $$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchArrayPatItem_$0($$dpth + 1, $$cr) !== null
                ) {
                    $$res = new ArrayPatItem($scope$literal);
                }
                return $$res;
            });
    }
    public matchArrayPatItem_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<ArrayPatItem_$0> {
        return this.choice<ArrayPatItem_$0>([
            () => this.matchArrayPatItem_$0_1($$dpth + 1, $$cr),
            () => this.matchArrayPatItem_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchArrayPatItem_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ArrayPatItem_$0_1> {
        return this.run<ArrayPatItem_$0_1>($$dpth,
            () => {
                let $$res: Nullable<ArrayPatItem_$0_1> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:,)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.ArrayPatItem_$0_1, };
                }
                return $$res;
            });
    }
    public matchArrayPatItem_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ArrayPatItem_$0_2> {
        return this.noConsume<string>(() => this.regexAccept(String.raw`(?:\])`, "", $$dpth + 1, $$cr));
    }
    public matchIdent($$dpth: number, $$cr?: ErrorTracker): Nullable<Ident> {
        return this.run<Ident>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<Ident> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$literal = this.regexAccept(String.raw`(?:[a-zA-Z_][a-zA-Z0-9_]*)`, "", $$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = new Ident($scope$literal);
                }
                return $$res;
            });
    }
    public match_($$dpth: number, $$cr?: ErrorTracker): Nullable<_> {
        return this.regexAccept(String.raw`(?:\s*)`, "", $$dpth + 1, $$cr);
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchProgram(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchProgram(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchProgram(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    // @ts-ignore: loopPlus may not be called
    private loopPlus<T>(func: $$RuleType<T>): Nullable<[T, ...T[]]> {
        return this.loop(func, 1, -1) as Nullable<[T, ...T[]]>;
    }
    private loop<T>(func: $$RuleType<T>, lb: number, ub: number): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        while (ub === -1 || res.length < ub) {
            const preMrk = this.mark();
            const t = func();
            if (t === null || this.pos.overallPos === preMrk.overallPos) {
                break;
            }
            res.push(t);
        }
        if (res.length >= lb) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    // @ts-ignore: choice may not be called
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, mods: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "y" + mods);
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    // @ts-ignore: noConsume may not be called
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    // @ts-ignore: negate may not be called
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    // @ts-ignore: Memoise may not be used
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
    private match$EOF(et?: ErrorTracker): Nullable<{kind: ASTKinds.$EOF}> {
        const res: {kind: ASTKinds.$EOF} | null = this.finished() ? { kind: ASTKinds.$EOF } : null;
        if(et)
            et.record(this.mark(), res, { kind: "EOF", negated: this.negating });
        return res;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<Program>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}