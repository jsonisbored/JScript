Program := stmts=Stmt* $

Stmt := CommentStmt
    | ReturnStmt
    | IfStmt
    | ForStmt
    | LetStmt
    | AssignStmt
    | FnStmt
    | ExprStmt

LetStmt := _'let'x
    mut='mut'? x
    pattern=Pattern
    _{':\s*' &'[a-zA-Z_]'}? type='[a-zA-Z_][a-zA-Z0-9_]*'?
    _'='_
    expr=Expr
    _';' pos=@ _
AssignStmt := _ pattern=Pattern _'='_ expr=Expr _';' pos=@ _
CommentStmt := _ literal='//.*' pos=@ _
ExprStmt := expr=Expr pos=@
FnStmt := _'fn'x
    ident=Ident
    _'\('_ params=Param* _'\)'_
    _{':\s*' &'[a-zA-Z_]'}? return_type='[a-zA-Z_][a-zA-Z0-9_]*'?
    _'{'_ stmts=Stmt* _'}'_
    pos=@ _
Param := _ name='[a-zA-Z_][a-zA-Z0-9_]*'_
    _':'_ type='[a-zA-Z_][a-zA-Z0-9_]*' _
    {_','_ | &'\)'}
ReturnStmt := _'return'x expr=Expr _';'_ pos=@
IfStmt := _'if'x
    condition=Expr
    _'{'_ stmts=Stmt* _'}'_
    pos=@
    otherwise=ElseStmt?
ElseStmt := {_'else'_ &'if|{'_}
    if=IfStmt?
    _'{'?_ stmts=Stmt* _'}'?_
    pos=@
ForStmt := _'for'x pattern=Pattern _'in'_ iter_expr=Expr _'{'_
    stmts=Stmt* _'}'_

Expr := IfExpr
    | ArrayExpr
    | SumExpr
    | ProdExpr
    | GroupExpr
    | RangeExpr
    | NumExpr
    | StringExpr
    | GetFieldExpr
    | GetIndexExpr
    | BoolExpr
    | IdentExpr

ArrayExpr := _'\['_ items=ArrayItem* _'\]'_ pos=@
    .type = string { return items.length ? `Array<${items[0].expr.type}>` : "idk"; }
    .value = unknown { return; }
ArrayItem := expr=Expr {_','_ | &'\]'}
SumExpr := left=Expr _ op='\+|-'_ right=Expr pos=@
    .type = string { return this.left.type; }
    .value = unknown { return; }
ProdExpr := left=Expr _ op='\*|/'_ right=Expr pos=@
    .type = string { return this.left.type; }
    .value = unknown { return; }
GroupExpr := _'\('_ expr=Expr _'\)'_ pos=@
    .type = string { return this.expr.type; }
    .value = unknown { return this.expr.value; }
GetFieldExpr := expr=Expr _'\.'_ field='[a-zA-Z_][a-zA-Z0-9_]*|[0-9]+'_ pos=@
    .type = string { return "idk"; }
    .value = unknown { return; }
GetIndexExpr := expr=Expr _'\['_ index=Expr _'\]'_ pos=@ 
    .type = string { return "idk"; }
    .value = unknown { return; }
IfExpr := _'if'x
    condition=Expr
    _'{'_ stmts=Stmt* _'}'_
    pos=@
    otherwise=ElseExpr?
    .type = string { return "idk"; }
    .value = unknown { return; }
ElseExpr := {_'else'_ &'if|{'_}
    if=IfExpr?
    _'{'?_ stmts=Stmt* _'}'?_
    pos=@

RangeExpr := min=Expr _'\.\.' inclusive='='? _ max=Expr pos=@
    .type = string { return 'Range'; }
    .value = unknown { return; }
NumExpr := _ literal='-?[0-9]+(\.[0-9]+)?' pos=@ _
    .value = number { return Number(this.literal); }
    .type = string { return 'num'; }
StringExpr := _ literal='".*"'_ pos=@
    .value = string { return this.literal.slice(1, -1); }
    .type = string { return 'str'; }
BoolExpr := literal='true|false' pos=@
    .value = boolean { return this.literal === 'true'; }
    .type = string { return 'bool' }
IdentExpr := _ literal='[a-zA-Z_][a-zA-Z0-9_]*'_ pos=@
    .value = unknown { return; }
    .type = string { return 'idk'; }

Pattern := Ident
    | ArrayPat
ArrayPat := _'\['_ items=ArrayPatItem* _'\]'_
ArrayPatItem := _ literal='[a-zA-Z_][a-zA-Z0-9_]*'_  {_','_ | &'\]'}
    .type = string { return 'idk'; }
Ident := _ literal='[a-zA-Z_][a-zA-Z0-9_]*'_
    .type = string { return 'idk'; }

_ := '\s*'
x := !'[a-zA-Z_]' _